name: Test Workflow

on:
  release:
    types: [published]
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch: 

jobs:
  build:
    name: bitcoin-ticker
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        include:
          - name: rpi_pico2_w

    env:
      # MicroPython version will be contained in github.event.release.tag_name for releases
      CI_RELEASE_FILENAME: bitcoin-ticker-${{ github.event.release.tag_name || github.sha }}
      CI_PROJECT_ROOT: ${{ github.workspace }}/src-${{ github.sha }}
      CI_TICKER_ROOT: ${{ github.workspace}}/ticker-${{ github.sha}}
      CI_BUILD_ROOT: ${{ github.workspace }}
      CI_USE_ENV: 1
    steps:
      - name: checkout ticker repo
        uses: actions/checkout@v4
        with:
          path: ${{env.CI_TICKER_ROOT}}
      - name: clone pimoroni micropython
        uses: actions/checkout@v4
        with:
          repository: pimoroni/pimoroni-pico-rp2350
          ref: feature/wireless
          submodules: true
          path: ${{env.CI_PROJECT_ROOT}}
      - name: "Install Arm GNU Toolchain (arm-none-eabi-gcc)"
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '13.3.Rel1'
      - name: "Prepare tools & dependencies"
        shell: bash
        run: |
          source $CI_PROJECT_ROOT/ci/micropython.sh && ci_debug
          mkdir -p $CI_BUILD_ROOT
          sudo apt update && sudo apt install -y ccache cmake python3 python3-venv python3-pip
          ci_prepare_all
      - name: "Move project files into modules"
        run: cp -r ${{env.CI_TICKER_ROOT}}/src/* ${{ github.workspace }}/micropython/ports/rp2/modules/
      - name: "MicroPython: Configure"
        shell: bash
        run: |
          source $CI_PROJECT_ROOT/ci/micropython.sh && ci_debug
          function ci_cmake_configure {
              BOARD=$1
              TOOLS_DIR="$CI_BUILD_ROOT/tools"
              MICROPY_BOARD_DIR=$CI_PROJECT_ROOT/boards/$BOARD
              if [ ! -f "$MICROPY_BOARD_DIR/mpconfigboard.cmake" ]; then
                  log_warning "Invalid board: \"$BOARD\". Run with ci_cmake_configure <board_name>."
                  return 1
              fi
              BUILD_DIR="$CI_BUILD_ROOT/build-$BOARD"
              cmake -S $CI_BUILD_ROOT/micropython/ports/rp2 -B "$BUILD_DIR" \
                  -DPICOTOOL_FORCE_FETCH_FROM_GIT=1 \
                  -DPICO_BUILD_DOCS=0 \
                  -DPICO_NO_COPRO_DIS=1 \
                  -DPICOTOOL_FETCH_FROM_GIT_PATH="$TOOLS_DIR/picotool" \
                  -DPIMORONI_PICO_PATH="$CI_BUILD_ROOT/pimoroni-pico" \
                  -DPIMORONI_TOOLS_DIR="$TOOLS_DIR" \
                  -DUSER_C_MODULES="$MICROPY_BOARD_DIR/usermodules.cmake" \
                  -DMICROPY_BOARD_DIR="$MICROPY_BOARD_DIR" \
                  -DMICROPY_BOARD="$BOARD" \
                  -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                  -DPython_EXECUTABLE=$(which python3) # Need to override this because the python executable was not found
          }
          micropython_version
          ci_cmake_configure ${{ matrix.name }}
      - name: "MicroPython: Build"
        shell: bash
        run: |
          source $CI_PROJECT_ROOT/ci/micropython.sh && ci_debug
          python3 -m venv "$CI_BUILD_ROOT/.dir2uf2"
          source "$CI_BUILD_ROOT/.dir2uf2/bin/activate"
          ci_cmake_build ${{ matrix.name }}
      - name: "Artifacts: Upload .uf2"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CI_RELEASE_FILENAME }}.uf2
          path: ${{ env.CI_BUILD_ROOT }}/${{ env.CI_RELEASE_FILENAME }}.uf2
      - name: "Release: Upload .uf2"
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.CI_BUILD_ROOT }}/${{ env.CI_RELEASE_FILENAME }}.uf2
